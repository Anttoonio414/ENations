// <auto-generated />
using System;
using ENations.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ENations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240213111229_AddCountryToUser")]
    partial class AddCountryToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyUser", b =>
                {
                    b.Property<int>("EmployedCompaniesCompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeesUserId")
                        .HasColumnType("integer");

                    b.HasKey("EmployedCompaniesCompanyId", "EmployeesUserId");

                    b.HasIndex("EmployeesUserId");

                    b.ToTable("CompanyUser");
                });

            modelBuilder.Entity("CompanyUser1", b =>
                {
                    b.Property<int>("OwnedCompaniesCompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnersUserId")
                        .HasColumnType("integer");

                    b.HasKey("OwnedCompaniesCompanyId", "OwnersUserId");

                    b.HasIndex("OwnersUserId");

                    b.ToTable("CompanyUser1");
                });

            modelBuilder.Entity("ENations.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NewspaperId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("Views")
                        .HasColumnType("integer");

                    b.Property<int>("Votes")
                        .HasColumnType("integer");

                    b.HasKey("ArticleId");

                    b.HasIndex("NewspaperId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ENations.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChatId"));

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChatId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("ENations.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<DateTime>("LastWorked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ENations.Models.CongressMember", b =>
                {
                    b.Property<int>("CongressMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CongressMemberId"));

                    b.Property<int>("PoliticalPartyId")
                        .HasColumnType("integer");

                    b.HasKey("CongressMemberId");

                    b.HasIndex("PoliticalPartyId");

                    b.ToTable("CongressMembers");
                });

            modelBuilder.Entity("ENations.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ENations.Models.CountryFunds", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Gold")
                        .HasColumnType("numeric");

                    b.HasKey("CountryId");

                    b.ToTable("CountryFunds");
                });

            modelBuilder.Entity("ENations.Models.ItemOffers", b =>
                {
                    b.Property<int>("ItemOffersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemOffersId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ItemOffersId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemOffers");
                });

            modelBuilder.Entity("ENations.Models.LawProposal", b =>
                {
                    b.Property<int>("LawProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LawProposalId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("CongressMemberId")
                        .HasColumnType("integer");

                    b.Property<int>("ExpectedVotes")
                        .HasColumnType("integer");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean");

                    b.Property<bool>("No")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Yes")
                        .HasColumnType("boolean");

                    b.HasKey("LawProposalId");

                    b.HasIndex("CongressMemberId");

                    b.HasIndex("UserId");

                    b.ToTable("LawProposals");
                });

            modelBuilder.Entity("ENations.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<int>("Likes")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ENations.Models.Newspaper", b =>
                {
                    b.Property<int>("NewspaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NewspaperId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NewspaperId");

                    b.HasIndex("UserId");

                    b.ToTable("Newspapers");
                });

            modelBuilder.Entity("ENations.Models.PartyMember", b =>
                {
                    b.Property<int>("PartyMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PartyMemberId"));

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("PoliticalPartyId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PartyMemberId");

                    b.HasIndex("PoliticalPartyId");

                    b.HasIndex("UserId");

                    b.ToTable("PartyMembers");
                });

            modelBuilder.Entity("ENations.Models.PoliticalParty", b =>
                {
                    b.Property<int>("PoliticalPartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PoliticalPartyId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PoliticalPartyId");

                    b.HasIndex("CountryId");

                    b.ToTable("PoliticalParties");
                });

            modelBuilder.Entity("ENations.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ENations.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("ChatId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Xp")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("ChatId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ENations.Models.UserGyms", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserGyms");
                });

            modelBuilder.Entity("ENations.Models.UserItems", b =>
                {
                    b.Property<int>("UserItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserItemsId"));

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quality")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserItemsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserItems");
                });

            modelBuilder.Entity("ENations.Models.UserMoney", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Gold")
                        .HasColumnType("numeric");

                    b.HasKey("UserId");

                    b.ToTable("UserMoney");
                });

            modelBuilder.Entity("CompanyUser", b =>
                {
                    b.HasOne("ENations.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("EmployedCompaniesCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENations.Models.User", null)
                        .WithMany()
                        .HasForeignKey("EmployeesUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyUser1", b =>
                {
                    b.HasOne("ENations.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("OwnedCompaniesCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENations.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ENations.Models.Article", b =>
                {
                    b.HasOne("ENations.Models.Newspaper", "Newspaper")
                        .WithMany("Articles")
                        .HasForeignKey("NewspaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENations.Models.User", null)
                        .WithMany("Articles")
                        .HasForeignKey("UserId");

                    b.Navigation("Newspaper");
                });

            modelBuilder.Entity("ENations.Models.CongressMember", b =>
                {
                    b.HasOne("ENations.Models.PoliticalParty", "PoliticalParty")
                        .WithMany("CongressMembers")
                        .HasForeignKey("PoliticalPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoliticalParty");
                });

            modelBuilder.Entity("ENations.Models.CountryFunds", b =>
                {
                    b.HasOne("ENations.Models.Country", "Country")
                        .WithOne("CountryFunds")
                        .HasForeignKey("ENations.Models.CountryFunds", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ENations.Models.ItemOffers", b =>
                {
                    b.HasOne("ENations.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENations.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ENations.Models.LawProposal", b =>
                {
                    b.HasOne("ENations.Models.CongressMember", "CongressMember")
                        .WithMany("LawProposals")
                        .HasForeignKey("CongressMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENations.Models.User", null)
                        .WithMany("LawProposals")
                        .HasForeignKey("UserId");

                    b.Navigation("CongressMember");
                });

            modelBuilder.Entity("ENations.Models.Message", b =>
                {
                    b.HasOne("ENations.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENations.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ENations.Models.Newspaper", b =>
                {
                    b.HasOne("ENations.Models.User", "Founder")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Founder");
                });

            modelBuilder.Entity("ENations.Models.PartyMember", b =>
                {
                    b.HasOne("ENations.Models.PoliticalParty", "PoliticalParty")
                        .WithMany("PartyMembers")
                        .HasForeignKey("PoliticalPartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENations.Models.User", "User")
                        .WithMany("PartyMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoliticalParty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ENations.Models.PoliticalParty", b =>
                {
                    b.HasOne("ENations.Models.Country", "Country")
                        .WithMany("PoliticalParties")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ENations.Models.Region", b =>
                {
                    b.HasOne("ENations.Models.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ENations.Models.User", b =>
                {
                    b.HasOne("ENations.Models.Chat", null)
                        .WithMany("Users")
                        .HasForeignKey("ChatId");

                    b.HasOne("ENations.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ENations.Models.Region", null)
                        .WithMany("Users")
                        .HasForeignKey("RegionId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ENations.Models.UserGyms", b =>
                {
                    b.HasOne("ENations.Models.User", "User")
                        .WithOne("UserGyms")
                        .HasForeignKey("ENations.Models.UserGyms", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ENations.Models.UserItems", b =>
                {
                    b.HasOne("ENations.Models.User", "User")
                        .WithMany("UserItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ENations.Models.UserMoney", b =>
                {
                    b.HasOne("ENations.Models.User", "User")
                        .WithOne("UserMoney")
                        .HasForeignKey("ENations.Models.UserMoney", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ENations.Models.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ENations.Models.CongressMember", b =>
                {
                    b.Navigation("LawProposals");
                });

            modelBuilder.Entity("ENations.Models.Country", b =>
                {
                    b.Navigation("CountryFunds")
                        .IsRequired();

                    b.Navigation("PoliticalParties");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("ENations.Models.Newspaper", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("ENations.Models.PoliticalParty", b =>
                {
                    b.Navigation("CongressMembers");

                    b.Navigation("PartyMembers");
                });

            modelBuilder.Entity("ENations.Models.Region", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ENations.Models.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("LawProposals");

                    b.Navigation("PartyMemberships");

                    b.Navigation("UserGyms")
                        .IsRequired();

                    b.Navigation("UserItems");

                    b.Navigation("UserMoney")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
